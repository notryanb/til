@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin reset(){
  margin:0;
  padding:0;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $spread: 5px, $color: rgba(0,0,0,.4)) {
    -webkit-box-shadow: $x $y $blur $spread $color;
    box-shadow: $x $y $blur $color;
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

//centering
@mixin center($xy:xy) {
 @if $xy == xy {
   left: 50%;
   top: 50%;
   bottom: auto;
   right: auto;
   @include translate(-50%, -50%);
 }
 @else if $xy == x {
   left: 50%;
   right: auto;
   @include translate(-50%, 0);
 }
 @else if $xy == y {
   top: 50%;
   bottom: auto;
   @include translate(0, -50%);
 }
}

// at least for mobile-first
@mixin min-width($width) {
  @media (min-width: $width) {
    @content;
  }
}

// max-width
@mixin max-width($width) {
  @media screen and (max-width: $width) {
    @content;
  }
}
